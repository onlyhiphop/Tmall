分页： 使用PageHelper框架
1. 在parent配置 PageHelper依赖
2. 在SqlMapConfig.xml中配置 plugins

将PageHelper安装在本地仓库
将PageHelper工程导入到IDEA，执行maven install


查询所有商品列表，要进行分页处理。
参数： int page，int rows
返回值： EasyUIDataGridResult
1. 在Tmallcommon中创建pojo： EasyUIDataGridResult


注意：修改了的项目一定要重新安装更新到本地库： maven install

高并发时，搭建多台服务器。图片数量大，独立出一台服务器。
图片服务器FastDFS： 里面还需要运行http服务器，接受图片上传和下载请求
  搭建nginx服务器：高性能的http服务器/反向代理服务器及电子邮件代理服务器，能够支撑5万并发链接，并且cpu、内存等资源消耗低，非常稳定。
  应用场景：
  1. http服务器。Nginx是一个http服务可以独立提供http服务，可以做网页静态服务器。
  2. 虚拟主机，可以实现在一台服务器虚拟出多个网站。例如个人网站使用的虚拟主机。
  3. 反向代理，负载均衡。当网站的访问量达到一定程度后，单台服务器不能满足用户的请求时，需要多台服务器集群可以使用nginx做反向代理。
    并且多台服务器可以平均分担负载，不会因为某台服务器负载高宕机，某台服务器闲置的情况。


使用fastDFS:
   1. 搭建fastDFS环境

   2. 安装fastDFS包到本地仓库
        （下载fastDFS的maven文件， project struct --> import module ）
        使用maven install安装到本地仓库

   3. 在Tmalmanager-web使用依赖
        <!--配置fastDFS-->
        <dependency>
            <groupId>fastdfs_client</groupId>
            <artifactId>fastdfs_client</artifactId>
            <version>1.25</version>
        </dependency>

   4. 文件上传还需要 common-io 和 commons-fileupload jar包
        在Tmallmanager-web的pom文件中引入依赖

   5. 在springmvc中配置多媒体解析器，上传文件解析器
       <bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
           <!--设置默认编码-->
           <property name="defaultEncoding" value="UTF-8"></property>
           <!--设定文件上传的最大值5MB， 5*1024*1024-->
           <property name="maxUploadSize" value="5242880"></property>
       </bean>

   6. 解决兼容性问题。
        由于上传的插件有缺陷，使用Firefox、IE等浏览器时，上传就会出问题。
        由于@ResponseBody是自动将对象转换成json字符串，而且会设置response头信息，response.setContentType("application/json;charset=utf-8");
        由于 有些浏览器头信息application/json 支持性不好或者不认识json，所以出现问题
        解决方案：
            将返回的 map 改成 string
            它就不用自己转换成json字符串，由于本身就是字符串，头信息就会变成 text/plain 纯文本



















